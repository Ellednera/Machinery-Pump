.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Machinery::Pump 3pm"
.TH Machinery::Pump 3pm "2025-01-12" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Machinery::Pump \- A general pump
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick summary of what the module does.
.PP
Perhaps a little code snippet.
.PP
.Vb 1
\&    use Machinery::Pump;
\&
\&    my $foo = Machinery::Pump\->new();
\&    ...
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new( \e%options )"
.IX Subsection "new( %options )"
Creates a new pump. For \f(CW%options\fR, only  \fIpump_id\fR is required, see below for more details.
.ie n .IP "designed_flowrate => $numerical" 4
.el .IP "designed_flowrate => \f(CW$numerical\fR" 4
.IX Item "designed_flowrate => $numerical"
The designed flowrate of the pump
.ie n .IP "rps => $integer" 4
.el .IP "rps => \f(CW$integer\fR" 4
.IX Item "rps => $integer"
The blade spin rate in round per second
.ie n .IP "remote_control => $bool" 4
.el .IP "remote_control => \f(CW$bool\fR" 4
.IX Item "remote_control => $bool"
The ability to control the pump through the \s-1DCS\s0
.IP "status = 0" 4
.IX Item "status = 0"
The status of the pump. This value is always set to 0 upon creation to indicate it is not running. This value can be changed by calling the \fIstatus\fR method.
.SS "pump_id"
.IX Subsection "pump_id"
Returns the pump id
.ie n .SS "designed_flowrate( [ $numerical ] )"
.el .SS "designed_flowrate( [ \f(CW$numerical\fP ] )"
.IX Subsection "designed_flowrate( [ $numerical ] )"
Gets or sets the designed flowrate, the unit is assumed to be \fIm^3 / h\fR
.ie n .SS "rps( [ $integer ] )"
.el .SS "rps( [ \f(CW$integer\fP ] )"
.IX Subsection "rps( [ $integer ] )"
Gets of sets the rps, the unit is assumed to be in \fIseconds\fR
.ie n .SS "remote_control( [ ""yes"" | ""no"" ] )"
.el .SS "remote_control( [ ``yes'' | ``no'' ] )"
.IX Subsection "remote_control( [ yes | no ] )"
Gets of sets the ability to control the pump remotely.
.SH "AUTHOR"
.IX Header "AUTHOR"
Raphael Jong Jun Jie, \f(CW\*(C`<ellednera at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-machinery\-pump at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=Machinery\-Pump>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Machinery::Pump
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=Machinery\-Pump>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/Machinery\-Pump>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/Machinery\-Pump>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Besiyata d'shmaya
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2025 by Raphael Jong Jun Jie.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
